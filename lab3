#include <stdio.h>
#include <stdlib.h>
#define max_size 5

int stack[max_size], top = -1;

void push();
void pop();
void display();
void pali();

int main() {
    int choice = 1;
    while (choice) {
        printf("\n\n--------STACK OPERATIONS-----------\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Palindrome Check\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("-----------------------------------\n");
        printf("Enter your choice:\t");
        scanf("%d", &choice);

        switch (choice) {
            case 1: push(); break;
            case 2: pop(); break;
            case 3: pali(); break;
            case 4: display(); break;
            case 5: exit(0);
            default: printf("\nInvalid choice\n"); break;
        }
    }
    return 0;
}

void push() {
    int item;
    if (top == max_size - 1) {
        printf("\nStack Overflow\n");
    } else {
        printf("Enter the element to be inserted:\t");
        scanf("%d", &item);
        stack[++top] = item;
    }
}

void pop() {
    if (top == -1) {
        printf("\nStack Underflow\n");
    } else {
        printf("Popped element: %d\n", stack[top--]);
    }
}

void pali() {
    if (top == -1) {
        printf("\nStack is empty. Nothing to check for palindrome.\n");
        return;
    }

    int len = top + 1;
    int num[len], rev[len], i, k, flag = 1;

    for (i = 0; i < len; i++) {
        num[i] = stack[i];
    }

    for (i = 0, k = len - 1; i < len; i++, k--) {
        rev[k] = num[i];
    }

    for (i = 0; i < len; i++) {
        if (num[i] != rev[i]) {
            flag = 0;
            break;
        }
    }

    if (flag)
        printf("\nIt is a palindrome.\n");
    else
        printf("\nIt is not a palindrome.\n");
}

void display() {
    if (top == -1) {
        printf("\nStack is Empty\n");
    } else {
        printf("\nStack elements are:\n");
        for (int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
    }
}
