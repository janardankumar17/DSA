#include <stdio.h>
#include <stdlib.h>

struct node {
    int info;
    struct node *llink;
    struct node *rlink;
};

typedef struct node* NODE;

NODE insert_node(int item, NODE root) {
    NODE cur, temp, prev;
    temp = (NODE)malloc(sizeof(struct node));
    if(temp == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    temp->info = item;
    temp->llink = temp->rlink = NULL;
    if(root == NULL)
        return temp;
    prev = NULL;
    cur = root;
    while(cur != NULL) {
        prev = cur;
        if(item < cur->info)
            cur = cur->llink;
        else
            cur = cur->rlink;
    }
    if(item < prev->info)
        prev->llink = temp;
    else
        prev->rlink = temp;
    return root;
}

void inorder(NODE root) {
    if(root == NULL)
        return;
    inorder(root->llink);
    printf("%d\t", root->info);
    inorder(root->rlink);
}

void preorder(NODE root) {
    if(root == NULL)
        return;
    printf("%d\t", root->info);
    preorder(root->llink);
    preorder(root->rlink);
}

void postorder(NODE root) {
    if(root == NULL)
        return;
    postorder(root->llink);
    postorder(root->rlink);
    printf("%d\t", root->info);
}

NODE search(int item, NODE root) {
    if(root == NULL || item == root->info)
        return root;
    if(item < root->info)
        return search(item, root->llink);
    return search(item, root->rlink);
}

NODE delete_node(int item, NODE root) {
    NODE child, suc, par, cur;
    if(root == NULL) {
        printf("Tree is empty\n");
        return root;
    }
    par = NULL;
    cur = root;
    while(cur != NULL && item != cur->info) {
        par = cur;
        if(item < cur->info)
            cur = cur->llink;
        else
            cur = cur->rlink;
    }
    if(cur == NULL) {
        printf("Item not found\n");
        return root;
    }
    if(cur->llink == NULL)
        child = cur->rlink;
    else if(cur->rlink == NULL)
        child = cur->llink;
    else {
        child = cur->rlink;
        suc = cur->rlink;
        while(suc->llink != NULL)
            suc = suc->llink;
        suc->llink = cur->llink;
    }
    if(par == NULL) {
        free(cur);
        return child;
    }
    if(cur == par->llink)
        par->llink = child;
    else
        par->rlink = child;
    free(cur);
    return root;
}

void free_tree(NODE root) {
    if(root == NULL)
        return;
    free_tree(root->llink);
    free_tree(root->rlink);
    free(root);
}

int main(void) {
    int choice, item;
    NODE root = NULL, temp;
    while(1) {
        printf("\n1. Insert\n2. Traverse\n3. Search\n4. Delete\n5. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                printf("Enter the item to be inserted: ");
                scanf("%d", &item);
                root = insert_node(item, root);
                break;
            case 2:
                if(root == NULL)
                    printf("Tree is empty.\n");
                else {
                    printf("Inorder: ");
                    inorder(root);
                    printf("\nPreorder: ");
                    preorder(root);
                    printf("\nPostorder: ");
                    postorder(root);
                    printf("\n");
                }
                break;
            case 3:
                printf("Enter element to search: ");
                scanf("%d", &item);
                temp = search(item, root);
                if(temp == NULL)
                    printf("Element not found.\n");
                else
                    printf("Element found: %d\n", temp->info);
                break;
            case 4:
                printf("Enter element to delete: ");
                scanf("%d", &item);
                root = delete_node(item, root);
                break;
            case 5:
                free_tree(root);
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
